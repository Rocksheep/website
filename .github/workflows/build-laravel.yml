name: "Build, test and deploy Laravel"

on: [push]

jobs:
  laravel-frontend:
    name: "Front-end build and test"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Cache node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: node-build-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            node-build-${{ env.cache-name }}-
            node-build-

      - name: Copy environment config
        run: cp .github/actions.env .env

      - name: Install Yarn dependencies
        run: yarn install --frozen-lockfile

      - name: Build Front-end
        run: yarn run production

      - name: Publish front-end
        uses: actions/upload-artifact@master
        with:
          name: front-end
          path: public/
  laravel-backend:
    name: "Back-end build and test"
    needs: [laravel-frontend]
    runs-on: ubuntu-latest
    services:
      database:
        image: mysql:5
        ports:
          - 13306:3306
        env:
          MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
          MYSQL_DATABASE: laravel
          MYSQL_USER: laravel
          MYSQL_PASSWORD: laravel
    steps:
      - uses: actions/checkout@v1

      - name: Cache Composer
        uses: actions/cache@v1
        with:
          path: vendor
          key: composer-build-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-build-${{ env.cache-name }}-
            composer-build-

      - name: Login for Laravel Nova
        run: composer config http-basic.nova.laravel.com ${NOVA_USERNAME} ${NOVA_PASSWORD}
        env:
          NOVA_USERNAME: ${{ secrets.NovaUsername }}
          NOVA_PASSWORD: ${{ secrets.NovaPassword }}

      - name: Copy environment config
        run: cp .github/actions.env .env

      - name: Install composer dependencies
        run: |
          composer install --no-suggest --no-progress --no-scripts --no-interaction
          php artisan key:generate
          composer install --no-suggest --no-progress --no-interaction

      - name: Prepare database
        run: php artisan migrate --seed

      - name: Download front-end
        uses: actions/download-artifact@master
        with:
          name: front-end
          path: public/

      - name: Run linters
        run: composer run lint

      - name: Run unit tests
        run: |
          test -d dist || mkdir dist
          vendor/bin/phpunit --coverage-clover ./dist/coverage-clover.xml

      - name: Report test results to CodeClimate
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t clover ./dist/coverage-clover.xml || true
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CodeClimateId }}
        continue-on-error: true
  laravel-deploy:
    name: "Deploy Laravel"
    needs: [laravel-frontend, laravel-backend]
    runs-on: ubuntu-latest
    steps:
      - name: Setup PHP
        uses: shivammathur/setup-php@master
        with:
          php-version: "7.3"
          extension-csv: exif,json,mbstring

      - name: Checkout code
        uses: actions/checkout@v1

      - name: Install Laravel Envoy
        run: composer global require laravel/envoy

      - name: Load SSH deploy key
        run: |
          eval $(ssh-agent -s)
          ssh-add <(echo "$SSH_PRIVATE_KEY")
          mkdir -p ${HOME}/.ssh
          echo "Host deploy.test" > ${HOME}/.ssh/config
          echo "    StrictHostKeyChecking no" >> ${HOME}/.ssh/config
          echo "    HostName ${SSH_HOST}" >> ${HOME}/.ssh/config
          echo "    Port ${SSH_PORT}" >> ${HOME}/.ssh/config
          echo "    User ${SSH_USER}" >> ${HOME}/.ssh/config
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}

      - name: Run Envoy
        run: |
          export PATH="$PATH:$HOME/.composer/vendor/bin/"
          export GUMBO_GIT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
          export GUMBO_GIT_REMOTE="$(git remote get-url origin)"
          export GUMBO_GIT_SHA="${GITHUB_SHA}"
          envoy run deploy \
            --branch="$GUMBO_GIT_BRANCH" \
            --env=production \
            --remote=${GUMBO_GIT_REMOTE} \
            --hash=${GUMBO_GIT_SHA}
